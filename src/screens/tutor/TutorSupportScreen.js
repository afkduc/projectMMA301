import { useState } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  SafeAreaView,
  ScrollView,
  TextInput,
  Alert,
} from "react-native";
import { styles } from "../../style/additional";
import { TutorBottomNav } from "../../components/BottomNavigation";

const TutorSupportScreen = ({ onTabPress, onBack }) => {
  const [activeTab, setActiveTab] = useState("faq");
  const [expandedFaq, setExpandedFaq] = useState(null);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [selectedPriority, setSelectedPriority] = useState("medium");
  const [contactForm, setContactForm] = useState({
    subject: "",
    message: "",
    email: "",
    phone: "",
  });

  const tabs = [
    { id: "faq", label: "FAQ" },
    { id: "contact", label: "Li√™n h·ªá" },
    { id: "guide", label: "H∆∞·ªõng d·∫´n" },
  ];

  const faqData = [
    {
      id: 1,
      question: "L√†m th·∫ø n√†o ƒë·ªÉ tƒÉng s·ªë l·ªõp nh·∫≠n ƒë∆∞·ª£c?",
      answer:
        "B·∫°n n√™n: 1) M·ªü r·ªông khu v·ª±c d·∫°y, 2) C·∫≠p nh·∫≠t h·ªì s∆° & k·ªπ nƒÉng th∆∞·ªùng xuy√™n, 3) Duy tr√¨ ƒë√°nh gi√° cao t·ª´ h·ªçc vi√™n/ph·ª• huynh, 4) Ph·∫£n h·ªìi nhanh khi c√≥ l·ªõp m·ªõi.",
    },
    {
      id: 2,
      question: "T√¥i c√≥ th·ªÉ thay ƒë·ªïi h·ªçc ph√≠ kh√¥ng?",
      answer:
        "C√≥. V√†o C√†i ƒë·∫∑t > Th√¥ng tin gi·∫£ng d·∫°y ƒë·ªÉ ƒëi·ªÅu ch·ªânh h·ªçc ph√≠ theo gi·ªù. N√™n c√¢n nh·∫Øc th·ªã tr∆∞·ªùng v√† m·ª©c ƒë·ªô c·∫°nh tranh.",
    },
    {
      id: 3,
      question: "Khi n√†o t√¥i nh·∫≠n ƒë∆∞·ª£c thanh to√°n?",
      answer:
        "Thanh to√°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn trong 24‚Äì48 gi·ªù sau khi bu·ªïi h·ªçc/l·ªõp ho√†n t·∫•t v√† ƒë∆∞·ª£c x√°c nh·∫≠n.",
    },
    {
      id: 4,
      question: "X·ª≠ l√Ω khi·∫øu n·∫°i c·ªßa ph·ª• huynh/h·ªçc vi√™n nh∆∞ th·∫ø n√†o?",
      answer:
        "H√£y: 1) L·∫Øng nghe v√† x√°c nh·∫≠n v·∫•n ƒë·ªÅ, 2) Xin l·ªói l·ªãch s·ª± n·∫øu c√≥ s∆° su·∫•t, 3) ƒê∆∞a gi·∫£i ph√°p/ƒë·ªÅn b√π ph√π h·ª£p, 4) Li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£ n·∫øu c·∫ßn.",
    },
  ];

  const supportCategories = [
    { id: "technical", title: "K·ªπ thu·∫≠t", description: "L·ªói ·ª©ng d·ª•ng, ƒëƒÉng nh·∫≠p", icon: "üîß" },
    { id: "payment", title: "Thanh to√°n", description: "H·ªçc ph√≠, r√∫t ti·ªÅn", icon: "üí∞" },
    { id: "class", title: "L·ªõp h·ªçc", description: "Nh·∫≠n l·ªõp, l·ªãch d·∫°y", icon: "üìö" },
    { id: "account", title: "T√†i kho·∫£n", description: "Th√¥ng tin c√° nh√¢n", icon: "üë§" },
  ];

  const priorityOptions = [
    { id: "low", label: "Th·∫•p", color: "#10b981" },
    { id: "medium", label: "Trung b√¨nh", color: "#f59e0b" },
    { id: "high", label: "Cao", color: "#ef4444" },
  ];

  const toggleFaq = (faqId) => {
    setExpandedFaq(expandedFaq === faqId ? null : faqId);
  };

  const handleQuickSupport = (type) => {
    switch (type) {
      case "call":
        Alert.alert("G·ªçi h·ªó tr·ª£", "S·ªë ƒëi·ªán tho·∫°i: 1900-1234");
        break;
      case "chat":
        Alert.alert("Chat tr·ª±c tuy·∫øn", "T√≠nh nƒÉng chat ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn");
        break;
      default:
        break;
    }
  };

  const handleSubmitContact = () => {
    if (!contactForm.subject || !contactForm.message) {
      Alert.alert("L·ªói", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin");
      return;
    }
    Alert.alert("Th√†nh c√¥ng", "Y√™u c·∫ßu h·ªó tr·ª£ ƒë√£ ƒë∆∞·ª£c g·ª≠i. Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong 24h.");
    setContactForm({ subject: "", message: "", email: "", phone: "" });
  };

  const renderTabContent = () => {
    switch (activeTab) {
      case "faq":
        return (
          <View>
            {/* Quick Support */}
            <View style={styles.quickSupportSection}>
              <Text style={styles.sectionTitle}>H·ªó tr·ª£ nhanh</Text>
              <View style={styles.quickSupportButtons}>
                <TouchableOpacity
                  style={styles.quickSupportButton}
                  onPress={() => handleQuickSupport("call")}
                >
                  <Text style={styles.quickSupportIcon}>üìû</Text>
                  <Text style={styles.quickSupportText}>G·ªçi ngay</Text>
                  <Text style={styles.quickSupportSubtext}>1900-1234</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={styles.quickSupportButton}
                  onPress={() => handleQuickSupport("chat")}
                >
                  <Text style={styles.quickSupportIcon}>üí¨</Text>
                  <Text style={styles.quickSupportText}>Chat tr·ª±c tuy·∫øn</Text>
                  <Text style={styles.quickSupportSubtext}>8:00 - 22:00</Text>
                </TouchableOpacity>
              </View>
            </View>

            {/* FAQ */}
            <View style={styles.faqSection}>
              <Text style={styles.sectionTitle}>C√¢u h·ªèi th∆∞·ªùng g·∫∑p</Text>
              <View style={styles.faqContainer}>
                {faqData.map((faq) => (
                  <View key={faq.id} style={styles.faqItem}>
                    <TouchableOpacity
                      style={styles.faqQuestion}
                      onPress={() => toggleFaq(faq.id)}
                    >
                      <Text style={styles.faqQuestionText}>{faq.question}</Text>
                      <Text style={styles.faqArrow}>
                        {expandedFaq === faq.id ? "‚àí" : "+"}
                      </Text>
                    </TouchableOpacity>
                    {expandedFaq === faq.id && (
                      <View style={styles.faqAnswer}>
                        <Text style={styles.faqAnswerText}>{faq.answer}</Text>
                      </View>
                    )}
                  </View>
                ))}
              </View>
            </View>
          </View>
        );

      case "contact":
        return (
          <View>
            {/* Support Categories */}
            <View style={styles.supportCategoriesSection}>
              <Text style={styles.sectionTitle}>Ch·ªçn lo·∫°i h·ªó tr·ª£</Text>
              <View style={styles.supportCategoriesGrid}>
                {supportCategories.map((category) => (
                  <TouchableOpacity
                    key={category.id}
                    style={[
                      styles.supportCategoryCard,
                      selectedCategory === category.id && styles.selectedSupportCategory,
                    ]}
                    onPress={() => setSelectedCategory(category.id)}
                  >
                    <Text style={styles.supportCategoryIcon}>{category.icon}</Text>
                    <Text style={styles.supportCategoryTitle}>{category.title}</Text>
                    <Text style={styles.supportCategoryDescription}>{category.description}</Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>

            {/* Contact Form */}
            <View style={styles.contactFormSection}>
              <Text style={styles.sectionTitle}>G·ª≠i y√™u c·∫ßu h·ªó tr·ª£</Text>
              <View style={styles.contactForm}>
                <View style={styles.formGroup}>
                  <Text style={styles.formLabel}>Ti√™u ƒë·ªÅ *</Text>
                  <TextInput
                    style={styles.contactInput}
                    value={contactForm.subject}
                    onChangeText={(text) => setContactForm((prev) => ({ ...prev, subject: text }))}
                    placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·∫•n ƒë·ªÅ"
                  />
                </View>

                <View style={styles.formGroup}>
                  <Text style={styles.formLabel}>M√¥ t·∫£ chi ti·∫øt *</Text>
                  <TextInput
                    style={[styles.contactInput, styles.contactTextArea]}
                    value={contactForm.message}
                    onChangeText={(text) => setContactForm((prev) => ({ ...prev, message: text }))}
                    placeholder="M√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ b·∫°n g·∫∑p ph·∫£i"
                    multiline
                  />
                </View>

                <View style={styles.formGroup}>
                  <Text style={styles.formLabel}>Email li√™n h·ªá</Text>
                  <TextInput
                    style={styles.contactInput}
                    value={contactForm.email}
                    onChangeText={(text) => setContactForm((prev) => ({ ...prev, email: text }))}
                    placeholder="email@example.com"
                    keyboardType="email-address"
                  />
                </View>

                <View style={styles.formGroup}>
                  <Text style={styles.formLabel}>S·ªë ƒëi·ªán tho·∫°i</Text>
                  <TextInput
                    style={styles.contactInput}
                    value={contactForm.phone}
                    onChangeText={(text) => setContactForm((prev) => ({ ...prev, phone: text }))}
                    placeholder="0123456789"
                    keyboardType="phone-pad"
                  />
                </View>

                <View style={styles.formGroup}>
                  <Text style={styles.formLabel}>M·ª©c ƒë·ªô ∆∞u ti√™n</Text>
                  <View style={styles.prioritySelector}>
                    {priorityOptions.map((priority) => (
                      <TouchableOpacity
                        key={priority.id}
                        style={[
                          styles.priorityButton,
                          { borderColor: priority.color },
                          selectedPriority === priority.id && styles.selectedPriorityButton,
                        ]}
                        onPress={() => setSelectedPriority(priority.id)}
                      >
                        <Text style={[styles.priorityButtonText, { color: priority.color }]}>
                          {priority.label}
                        </Text>
                      </TouchableOpacity>
                    ))}
                  </View>
                </View>

                <TouchableOpacity style={styles.submitContactButton} onPress={handleSubmitContact}>
                  <Text style={styles.submitContactButtonText}>G·ª≠i y√™u c·∫ßu</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        );

      case "guide":
        return (
          <View style={styles.supportTipsSection}>
            <View style={styles.supportTips}>
              <Text style={styles.supportTipsTitle}>üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</Text>
              <Text style={styles.supportTipsText}>
                <Text style={{ fontWeight: "bold" }}>1. Qu·∫£n l√Ω l·ªõp h·ªçc:{"\n"}</Text>
                ‚Ä¢ Ki·ªÉm tra l·ªõp m·ªõi trong tab "L·ªõp h·ªçc"{"\n"}‚Ä¢ Nh·∫≠n/T·ª´ ch·ªëi l·ªõp ƒë√∫ng h·∫°n{"\n"}‚Ä¢ C·∫≠p nh·∫≠t tr·∫°ng th√°i bu·ªïi h·ªçc{"\n\n"}
                <Text style={{ fontWeight: "bold" }}>2. T·ªëi ∆∞u h·ªì s∆°:{"\n"}</Text>
                ‚Ä¢ ·∫¢nh ƒë·∫°i di·ªán chuy√™n nghi·ªáp{"\n"}‚Ä¢ M√¥ t·∫£ m√¥n d·∫°y, ph∆∞∆°ng ph√°p & ch·ª©ng ch·ªâ{"\n"}‚Ä¢ Thi·∫øt l·∫≠p khu v·ª±c d·∫°y h·ª£p l√Ω{"\n\n"}
                <Text style={{ fontWeight: "bold" }}>3. TƒÉng thu nh·∫≠p:{"\n"}</Text>
                ‚Ä¢ Duy tr√¨ ƒë√°nh gi√° cao{"\n"}‚Ä¢ Ph·∫£n h·ªìi nhanh y√™u c·∫ßu m·ªõi{"\n"}‚Ä¢ L·ªãch d·∫°y nh·∫•t qu√°n, ƒë√∫ng gi·ªù
              </Text>
            </View>
          </View>
        );

      default:
        return null;
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.screenHeader}>
        <TouchableOpacity onPress={onBack}>
          <Text style={styles.backButton}>‚Üê Quay l·∫°i</Text>
        </TouchableOpacity>
        <Text style={styles.screenTitle}>H·ªó tr·ª£ gia s∆∞</Text>
        <View />
      </View>

      {/* Tab Navigation */}
      <View style={styles.supportTabContainer}>
        {tabs.map((tab) => (
          <TouchableOpacity
            key={tab.id}
            style={[styles.supportTab, activeTab === tab.id && styles.activeSupportTab]}
            onPress={() => setActiveTab(tab.id)}
          >
            <Text
              style={[styles.supportTabText, activeTab === tab.id && styles.activeSupportTabText]}
            >
              {tab.label}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      <ScrollView style={styles.supportContent}>{renderTabContent()}</ScrollView>

      <TutorBottomNav onTabPress={onTabPress} activeTab="tutorProfile" />
    </SafeAreaView>
  );
};

export default TutorSupportScreen;
