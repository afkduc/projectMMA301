// screens/AiAdvisorScreen.js
import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  ActivityIndicator,
  KeyboardAvoidingView,
  Platform,
  SafeAreaView,
} from 'react-native';
import { MaterialCommunityIcons, Ionicons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import { GEMINI_API_KEY } from '../config/apiKeys';

export default function AiAdvisorScreen({ navigation }) {
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState([
    {
      id: 'w1',
      role: 'ai',
      text:
        'Xin ch√†o! M√¨nh l√† Tr·ª£ l√Ω Gia S∆∞ th√¥ng minh ‚Äî m√¨nh gi√∫p b·∫°n t√¨m gia s∆∞, l·∫≠p l·ªô tr√¨nh h·ªçc v√† tr·∫£ l·ªùi c√¢u h·ªèi h·ªçc t·∫≠p.',
    },
  ]);
  const [loading, setLoading] = useState(false);
  const scrollRef = useRef();

  useEffect(() => {
    scrollRef.current?.scrollToEnd({ animated: true });
  }, [messages]);

  // ‚úÖ H√ÄM KI·ªÇM TRA C√ÇU H·ªéI C√ì LI√äN QUAN "GIA S∆Ø" KH√îNG
  const isTutorRelated = (text) => {
    const keywords = [
      'gia s∆∞',
      'd·∫°y',
      'h·ªçc',
      'm√¥n',
      'to√°n',
      'l√Ω',
      'h√≥a',
      'vƒÉn',
      'anh',
      'sinh',
      '√¥n thi',
      'luy·ªán thi',
      'h·ªçc th·ª≠',
      'l·ªô tr√¨nh',
      'tr∆∞·ªùng',
      'ƒë·∫°i h·ªçc',
      'trung h·ªçc',
      'ti·ªÉu h·ªçc',
    ];
    const lower = text.toLowerCase();
    return keywords.some((k) => lower.includes(k));
  };

  const callGemini = async (prompt) => {
    setLoading(true);
    try {
      const res = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            contents: [{ parts: [{ text: prompt }] }],
          }),
        }
      );
      const data = await res.json();
      const reply =
        data?.candidates?.[0]?.content?.parts?.[0]?.text ??
        'Xin l·ªói, m√¨nh kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi l√∫c n√†y.';

      setMessages((prev) => {
        const last = prev[prev.length - 1];
        if (last?.role === 'ai' && last?.text === 'ü§ñ ƒêang tr·∫£ l·ªùi...') {
          return [...prev.slice(0, -1), { id: Date.now().toString(), role: 'ai', text: reply }];
        }
        return [...prev, { id: Date.now().toString(), role: 'ai', text: reply }];
      });
    } catch (err) {
      console.error('Gemini l·ªói:', err);
      setMessages((prev) => [
        ...prev,
        {
          id: Date.now().toString(),
          role: 'ai',
          text: '‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi Gemini. Vui l√≤ng th·ª≠ l·∫°i sau.',
        },
      ]);
    } finally {
      setLoading(false);
    }
  };

  const sendMessage = async (textToSend) => {
    const text = textToSend ?? input;
    if (!text || !text.trim()) return;

    // ƒë·∫©y tin nh·∫Øn ng∆∞·ªùi d√πng
    setMessages((prev) => [...prev, { id: Date.now().toString(), role: 'user', text }]);
    setInput('');

    // n·∫øu h·ªèi ngo√†i ch·ªß ƒë·ªÅ gia s∆∞ ‚Üí ph·∫£n h·ªìi nh·∫π nh√†ng
    if (!isTutorRelated(text)) {
      setMessages((prev) => [
        ...prev,
        {
          id: Date.now().toString(),
          role: 'ai',
          text:
            'M√¨nh ch·ªâ h·ªó tr·ª£ c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn **gia s∆∞, h·ªçc t·∫≠p, v√† l·ªô tr√¨nh h·ªçc** th√¥i nh√© ‚ù§Ô∏è. ' +
            'C√°c ch·ªß ƒë·ªÅ kh√°c b·∫°n c√≥ th·ªÉ tham kh·∫£o qua c√°c k√™nh h·ªó tr·ª£ kh√°c.',
        },
      ]);
      return;
    }

    // n·∫øu h·ª£p l·ªá ‚Üí g·ªçi Gemini th·∫≠t
    setMessages((prev) => [...prev, { id: 'typing-' + Date.now(), role: 'ai', text: 'ü§ñ ƒêang tr·∫£ l·ªùi...' }]);
    await callGemini(
      `B·∫°n l√† tr·ª£ l√Ω gia s∆∞. Ng∆∞·ªùi d√πng h·ªèi: ${text}.
      Tr·∫£ l·ªùi ng·∫Øn g·ªçn, h·ªØu √≠ch, r√µ r√†ng, c√≥ th·ªÉ k√®m g·ª£i √Ω h√†nh ƒë·ªông nh∆∞ "ƒê·∫∑t l·ªãch h·ªçc th·ª≠", "T√¨m gia s∆∞ g·∫ßn b·∫°n".`
    );
  };

  const handleQuickAction = (actionKey) => {
    const mapping = {
      'find-tutor': 'T√¨m gia s∆∞ d·∫°y To√°n, c·∫•p 3, khu v·ª±c H√† N·ªôi, gi√° h·ª£p l√Ω. G·ª£i √Ω 3 l·ª±a ch·ªçn + c√°ch li√™n h·ªá.',
      'trial-lesson': 'T√¥i mu·ªën ƒëƒÉng k√Ω h·ªçc th·ª≠ mi·ªÖn ph√≠ cho m√¥n L√Ω l·ªõp 11. H∆∞·ªõng d·∫´n c√°c b∆∞·ªõc c·∫ßn l√†m.',
      'study-plan': 'L·∫≠p l·ªô tr√¨nh h·ªçc 8 tu·∫ßn ƒë·ªÉ √¥n thi to√°n h·ªçc k·ª≥ l·ªõp 10 cho h·ªçc sinh trung b√¨nh, m·ªói tu·∫ßn 3 bu·ªïi.',
      'subject-help': 'Gi·∫£i th√≠ch ng·∫Øn g·ªçn ph∆∞∆°ng ph√°p gi·∫£i b√†i t√≠ch ph√¢n c∆° b·∫£n v√† v√≠ d·ª•.',
      'pricing': 'C√°c m·ª©c gi√° gia s∆∞ ph·ªï bi·∫øn hi·ªán nay cho gia s∆∞ ƒë·∫°i h·ªçc d·∫°y k√®m t·∫°i nh√† (1 bu·ªïi 90 ph√∫t).',
      'contact-support': 'T√¥i mu·ªën li√™n h·ªá h·ªó tr·ª£ d·ªãch v·ª• gia s∆∞. H√£y cho t√¥i c√°c k√™nh li√™n h·ªá v√† m·∫´u tin nh·∫Øn s·∫µn.',
    };
    const prompt = mapping[actionKey];
    setMessages((prev) => [...prev, { id: Date.now().toString(), role: 'user', text: prompt }]);
    setMessages((prev) => [...prev, { id: 'typing-' + Date.now(), role: 'ai', text: 'ü§ñ ƒêang tr·∫£ l·ªùi...' }]);
    callGemini(`B·∫°n l√† tr·ª£ l√Ω gia s∆∞. ${prompt}\nTr·∫£ l·ªùi ng·∫Øn g·ªçn, c√≥ g·ª£i √Ω h√†nh ƒë·ªông.`);
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      {/* Header & Quick Action Grid */}
      <View style={styles.headerWrap}>
        <View style={styles.headerCard}>
          <View style={styles.headerTop}>
            <View style={styles.headerLeft}>
              <LinearGradient colors={['#8E2DE2', '#4A00E0']} style={styles.avatarGradient}>
                <MaterialCommunityIcons name="robot-happy" size={22} color="#fff" />
              </LinearGradient>
              <Text style={styles.headerTitle}>Tr·ª£ l√Ω ·∫£o GiaS∆∞.ai</Text>
            </View>
            <TouchableOpacity onPress={() => navigation.goBack()}>
              <Ionicons name="close" size={24} color="#333" />
            </TouchableOpacity>
          </View>

          <View style={styles.welcomeBubble}>
            <Text style={styles.welcomeText}>
              Ch√†o b·∫°n! M√¨nh l√† GiaS∆∞.ai ‚Äî m√¨nh c√≥ th·ªÉ gi√∫p t√¨m gia s∆∞, l·∫≠p l·ªô tr√¨nh √¥n t·∫≠p, gi·∫£i b√†i t·∫≠p v√† l√™n l·ªãch h·ªçc.
            </Text>
          </View>

          <View style={styles.gridWrap}>
            <TouchableOpacity style={styles.tile} onPress={() => handleQuickAction('find-tutor')}>
              <MaterialCommunityIcons name="magnify" size={20} color="#d32f2f" />
              <Text style={styles.tileText}>T√¨m gia s∆∞</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.tile} onPress={() => handleQuickAction('trial-lesson')}>
              <MaterialCommunityIcons name="school" size={20} color="#d32f2f" />
              <Text style={styles.tileText}>H·ªçc th·ª≠</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.tile} onPress={() => handleQuickAction('study-plan')}>
              <MaterialCommunityIcons name="calendar-multiselect" size={20} color="#d32f2f" />
              <Text style={styles.tileText}>L·ªô tr√¨nh</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.tile} onPress={() => handleQuickAction('subject-help')}>
              <MaterialCommunityIcons name="lightbulb-on-outline" size={20} color="#d32f2f" />
              <Text style={styles.tileText}>Gi·∫£i b√†i</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.tile} onPress={() => handleQuickAction('pricing')}>
              <MaterialCommunityIcons name="cash" size={20} color="#d32f2f" />
              <Text style={styles.tileText}>B√°o gi√°</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.tile} onPress={() => handleQuickAction('contact-support')}>
              <MaterialCommunityIcons name="phone" size={20} color="#d32f2f" />
              <Text style={styles.tileText}>Li√™n h·ªá</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>

      {/* Chat Section */}
      <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : undefined} style={styles.container}>
        <ScrollView ref={scrollRef} contentContainerStyle={styles.messagesContainer}>
          {messages.map((m) => (
            <View key={m.id} style={[styles.msgWrapper, m.role === 'user' ? styles.msgUserWrap : styles.msgAiWrap]}>
              {m.role === 'ai' && (
                <LinearGradient colors={['#8E2DE2', '#4A00E0']} style={styles.aiAvatarGradient}>
                  <MaterialCommunityIcons name="robot-happy-outline" size={18} color="#fff" />
                </LinearGradient>
              )}
              <View style={[styles.msgBubble, m.role === 'user' ? styles.userMsg : styles.aiMsg]}>
                <Text style={[styles.msgText, m.role === 'user' ? styles.userMsgText : styles.aiMsgText]}>
                  {m.text}
                </Text>
              </View>
            </View>
          ))}
        </ScrollView>

        <View style={styles.inputBar}>
          <TextInput
            value={input}
            onChangeText={setInput}
            placeholder="Nh·∫≠p n·ªôi dung c·∫ßn h·ªó tr·ª£ (VD: 'T√¨m gia s∆∞ to√°n l·ªõp 10')"
            style={styles.input}
            placeholderTextColor="#999"
          />
          <TouchableOpacity style={styles.sendBtn} onPress={() => sendMessage()}>
            {loading ? <ActivityIndicator color="#fff" /> : <Ionicons name="send" size={20} color="#fff" />}
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: { flex: 1, backgroundColor: '#f2f2f6' },
  headerWrap: { paddingHorizontal: 12, paddingTop: 12 },
  headerCard: { backgroundColor: '#fff', borderRadius: 12, padding: 12, elevation: 4 },
  headerTop: { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' },
  headerLeft: { flexDirection: 'row', alignItems: 'center', gap: 10 },
  avatarGradient: { width: 42, height: 42, borderRadius: 21, alignItems: 'center', justifyContent: 'center' },
  headerTitle: { fontSize: 16, fontWeight: '700', color: '#222' },
  welcomeBubble: { marginTop: 12, backgroundColor: '#f7f7f8', padding: 12, borderRadius: 10 },
  welcomeText: { color: '#333' },
  gridWrap: { marginTop: 14, flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between' },
  tile: {
    width: '48%',
    backgroundColor: '#fff',
    borderRadius: 10,
    padding: 12,
    marginBottom: 10,
    flexDirection: 'row',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  tileText: { marginLeft: 10, fontSize: 14, color: '#333', fontWeight: '600' },
  container: { flex: 1, paddingHorizontal: 12, paddingTop: 10 },
  messagesContainer: { paddingBottom: 12 },
  msgWrapper: { flexDirection: 'row', alignItems: 'flex-end', marginBottom: 10 },
  msgUserWrap: { justifyContent: 'flex-end' },
  msgAiWrap: { justifyContent: 'flex-start' },
  aiAvatarGradient: { width: 36, height: 36, borderRadius: 18, alignItems: 'center', justifyContent: 'center', marginRight: 8 },
  msgBubble: { maxWidth: '78%', padding: 10, borderRadius: 12 },
  userMsg: { backgroundColor: '#007AFF', alignSelf: 'flex-end', borderTopRightRadius: 4 },
  aiMsg: { backgroundColor: '#fff', alignSelf: 'flex-start', borderTopLeftRadius: 4, borderWidth: 1, borderColor: '#eee' },
  msgText: { fontSize: 14 },
  userMsgText: { color: '#fff' },
  aiMsgText: { color: '#333' },
  inputBar: {
    flexDirection: 'row',
    paddingVertical: 8,
    alignItems: 'center',
    borderTopWidth: 1,
    borderColor: '#e6e6e6',
    backgroundColor: '#fff',
    paddingHorizontal: 8,
    borderRadius: 8,
    marginBottom: Platform.OS === 'ios' ? 20 : 6,
  },
  input: { flex: 1, paddingHorizontal: 12, paddingVertical: 8, backgroundColor: '#f2f2f6', borderRadius: 20, fontSize: 14 },
  sendBtn: { backgroundColor: '#8E2DE2', padding: 12, borderRadius: 20, marginLeft: 8, alignItems: 'center', justifyContent: 'center' },
});
