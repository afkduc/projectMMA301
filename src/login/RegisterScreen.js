import React, { useState } from "react"
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  SafeAreaView,
  Alert,
  ActivityIndicator,
  ScrollView,
  Modal,
  FlatList,
} from "react-native"
import { styles } from "@style/styles"
import UserService from "@service/UserService"
import tutorService from "@service/tutorService"

const RegisterScreen = ({ onRegister, onBackToLogin }) => {
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    email: "",
    password: "",
    confirmPassword: "",
    role: "customer",
    serviceId: [],
    experience: "",
    certificate: "",
    address: "",
    customSubject: "",
  })

  const [loading, setLoading] = useState(false)

  // Modal hi·ªÉn th·ªã khu v·ª±c & m√¥n h·ªçc
  const [modalAreaVisible, setModalAreaVisible] = useState(false)
  const [modalSubjectVisible, setModalSubjectVisible] = useState(false)

  // T√¨m ki·∫øm trong modal
  const [searchArea, setSearchArea] = useState("")
  const [searchSubject, setSearchSubject] = useState("")

  // Danh s√°ch m√¥n h·ªçc
  const subjectItems = [
    "To√°n h·ªçc",
    "Ti·∫øng Anh",
    "V·∫≠t l√Ω",
    "H√≥a h·ªçc",
    "Sinh h·ªçc",
    "Tin h·ªçc",
    "Ng·ªØ vƒÉn",
    "L·ªãch s·ª≠",
    "ƒê·ªãa l√Ω",
  ]

  // Danh s√°ch khu v·ª±c H√† N·ªôi
  const areaItems = [
    "Ba ƒê√¨nh",
    "Ho√†n Ki·∫øm",
    "ƒê·ªëng ƒêa",
    "Hai B√† Tr∆∞ng",
    "C·∫ßu Gi·∫•y",
    "Thanh Xu√¢n",
    "Ho√†ng Mai",
    "Long Bi√™n",
    "T√¢y H·ªì",
    "Nam T·ª´ Li√™m",
    "B·∫Øc T·ª´ Li√™m",
    "H√† ƒê√¥ng",
    "Thanh Tr√¨",
    "Gia L√¢m",
    "ƒê√¥ng Anh",
    "S√≥c S∆°n",
    "Ho√†i ƒê·ª©c",
    "ƒêan Ph∆∞·ª£ng",
    "Th∆∞·ªùng T√≠n",
    "Ph√∫ Xuy√™n",
    "·ª®ng H√≤a",
    "M·ªπ ƒê·ª©c",
    "Ph√∫c Th·ªç",
    "Ba V√¨",
    "Ch∆∞∆°ng M·ªπ",
    "Thanh Oai",
    "Qu·ªëc Oai",
    "Th·∫°ch Th·∫•t",
    "M√™ Linh",
    "S∆°n T√¢y (th·ªã x√£)",
    "Kh√°c (ngo√†i H√† N·ªôi)",
  ]

  const updateFormData = (field, value) => {
    setFormData((prev) => ({ ...prev, [field]: value }))
  }

  const validateForm = () => {
    const { name, phone, email, password, confirmPassword, role, serviceId, experience } = formData

    if (!name.trim() || !phone.trim() || !email.trim() || !password.trim() || !confirmPassword.trim()) {
      Alert.alert("L·ªói", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin")
      return false
    }

    const phoneRegex = /^(0|\+84)(3[2-9]|5[6|8|9]|7[0|6-9]|8[1-9]|9[0-9])[0-9]{7}$/
    if (!phoneRegex.test(phone)) {
      Alert.alert("L·ªói", "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")
      return false
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      Alert.alert("L·ªói", "Email kh√¥ng h·ª£p l·ªá")
      return false
    }

    if (password !== confirmPassword) {
      Alert.alert("L·ªói", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp")
      return false
    }

    if (password.length < 6) {
      Alert.alert("L·ªói", "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±")
      return false
    }

    if (role === "tutor" && (!serviceId.length || !experience.trim())) {
      Alert.alert("L·ªói", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√¥n h·ªçc v√† nh·∫≠p kinh nghi·ªám")
      return false
    }

    return true
  }

  const handleRegister = async () => {
    if (!validateForm()) return

    try {
      setLoading(true)

      const phoneExists = await UserService.phoneExists(formData.phone)
      if (phoneExists) {
        Alert.alert("L·ªói", "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng")
        return
      }

      const emailExists = await UserService.emailExists(formData.email)
      if (emailExists) {
        Alert.alert("L·ªói", "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng")
        return
      }

      const userData = {
        name: formData.name,
        phone: formData.phone,
        email: formData.email,
        password: formData.password,
        role: formData.role,
        status: formData.role === "tutor" ? "pending" : "active",
        joinDate: new Date().toISOString().split("T")[0],
        address: formData.address || "H√† N·ªôi",
        avatar: formData.role === "tutor" ? "üë®‚Äçüè´" : "üë§",
      }

      const userId = await UserService.createUser(userData)

      if (formData.role === "tutor") {
        const tutorData = {
          userId,
          name: formData.name,
          phone: formData.phone,
          email: formData.email,
          specialty: formData.serviceId.join(", "),
          serviceId: formData.serviceId,
          experience: formData.experience,
          certificate: formData.certificate,
          address: formData.address || "H√† N·ªôi",
          status: "false",
          rating: 0,
          completedOrders: 0,
          price: "Th·ªèa thu·∫≠n",
          avatar: "üë®‚Äçüè´",
          reviews: 0,
        }

        await tutorService.createTutor(tutorData)
      }

      Alert.alert(
        "ƒêƒÉng k√Ω th√†nh c√¥ng!",
        formData.role === "tutor"
          ? "T√†i kho·∫£n gia s∆∞ ƒëang ch·ªù ph√™ duy·ªát."
          : "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay.",
        [{ text: "OK", onPress: onRegister }]
      )
    } catch (error) {
      console.error("Registration error:", error)
      Alert.alert("L·ªói", "ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.")
    } finally {
      setLoading(false)
    }
  }

  // L·ªçc danh s√°ch t√¨m ki·∫øm
  const filteredAreas = areaItems.filter((a) =>
    a.toLowerCase().includes(searchArea.toLowerCase())
  )
  const filteredSubjects = subjectItems.filter((s) =>
    s.toLowerCase().includes(searchSubject.toLowerCase())
  )

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={{ flex: 1 }}>
        <View style={styles.content}>
          <View style={styles.header}>
            <Text style={styles.logo}>üìù</Text>
            <Text style={styles.title}>ƒêƒÉng k√Ω t√†i kho·∫£n</Text>
            <Text style={styles.subtitle}>T·∫°o t√†i kho·∫£n m·ªõi ƒë·ªÉ s·ª≠ d·ª•ng d·ªãch v·ª•</Text>
          </View>

          <View style={styles.form}>
            {/* ====== Lo·∫°i t√†i kho·∫£n ====== */}
            <View style={styles.roleContainer}>
              <Text style={styles.roleLabel}>Lo·∫°i t√†i kho·∫£n</Text>
              <View style={styles.roleButtons}>
                <TouchableOpacity
                  style={[
                    styles.roleButton,
                    formData.role === "customer" && styles.activeRoleButton,
                  ]}
                  onPress={() => updateFormData("role", "customer")}
                >
                  <Text
                    style={[
                      styles.roleButtonText,
                      formData.role === "customer" && styles.activeRoleButtonText,
                    ]}
                  >
                    üë§ Kh√°ch h√†ng
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity
                  style={[
                    styles.roleButton,
                    formData.role === "tutor" && styles.activeRoleButton,
                  ]}
                  onPress={() => updateFormData("role", "tutor")}
                >
                  <Text
                    style={[
                      styles.roleButtonText,
                      formData.role === "tutor" && styles.activeRoleButtonText,
                    ]}
                  >
                    üéì Gia s∆∞
                  </Text>
                </TouchableOpacity>
              </View>
            </View>

            {/* ====== Th√¥ng tin c∆° b·∫£n ====== */}
            <TextInput
              style={styles.input}
              placeholder="H·ªç v√† t√™n"
              value={formData.name}
              onChangeText={(value) => updateFormData("name", value)}
            />
            <TextInput
              style={styles.input}
              placeholder="S·ªë ƒëi·ªán tho·∫°i"
              keyboardType="phone-pad"
              value={formData.phone}
              onChangeText={(value) => updateFormData("phone", value)}
            />
            <TextInput
              style={styles.input}
              placeholder="Email"
              keyboardType="email-address"
              autoCapitalize="none"
              value={formData.email}
              onChangeText={(value) => updateFormData("email", value)}
            />
            <TextInput
              style={styles.input}
              placeholder="M·∫≠t kh·∫©u"
              secureTextEntry
              value={formData.password}
              onChangeText={(value) => updateFormData("password", value)}
            />
            <TextInput
              style={styles.input}
              placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u"
              secureTextEntry
              value={formData.confirmPassword}
              onChangeText={(value) => updateFormData("confirmPassword", value)}
            />

            {/* ====== Khu v·ª±c ====== */}
            <TouchableOpacity
              style={[styles.input, { justifyContent: "center" }]}
              onPress={() => setModalAreaVisible(true)}
            >
              <Text style={{ color: formData.address ? "#000" : "#999" }}>
                {formData.address || "Ch·ªçn khu v·ª±c..."}
              </Text>
            </TouchableOpacity>

            {/* ====== Modal ch·ªçn khu v·ª±c ====== */}
            <Modal
              visible={modalAreaVisible}
              animationType="slide"
              transparent={true}
              onRequestClose={() => setModalAreaVisible(false)}
            >
              <View style={{ flex: 1, justifyContent: "flex-end", backgroundColor: "rgba(0,0,0,0.3)" }}>
                <View style={{ backgroundColor: "white", borderTopLeftRadius: 20, borderTopRightRadius: 20, maxHeight: "60%" }}>
                  <Text style={{ fontSize: 18, fontWeight: "600", textAlign: "center", marginVertical: 10 }}>
                    Ch·ªçn khu v·ª±c
                  </Text>
                  <TextInput
                    style={{
                      marginHorizontal: 15,
                      marginBottom: 10,
                      borderColor: "#ccc",
                      borderWidth: 1,
                      borderRadius: 8,
                      paddingHorizontal: 10,
                      height: 40,
                    }}
                    placeholder="T√¨m khu v·ª±c..."
                    value={searchArea}
                    onChangeText={setSearchArea}
                  />
                  <FlatList
                    data={filteredAreas}
                    keyExtractor={(item) => item}
                    renderItem={({ item }) => (
                      <TouchableOpacity
                        style={{ paddingVertical: 12, alignItems: "center", borderBottomColor: "#eee", borderBottomWidth: 1 }}
                        onPress={() => {
                          updateFormData("address", item)
                          setModalAreaVisible(false)
                        }}
                      >
                        <Text style={{ fontSize: 16 }}>{item}</Text>
                      </TouchableOpacity>
                    )}
                  />
                </View>
              </View>
            </Modal>

            {/* ====== N·∫øu l√† gia s∆∞ ====== */}
            {formData.role === "tutor" && (
              <View style={styles.tutorFieldsContainer}>
                <Text style={styles.tutorFieldsTitle}>Th√¥ng tin gia s∆∞</Text>

                {/* ====== M√¥n h·ªçc ====== */}
                <TouchableOpacity
                  style={[styles.input, { justifyContent: "center" }]}
                  onPress={() => setModalSubjectVisible(true)}
                >
                  <Text style={{ color: formData.serviceId.length ? "#000" : "#999" }}>
                    {formData.serviceId.length
                      ? `ƒê√£ ch·ªçn: ${formData.serviceId.join(", ")}`
                      : "Ch·ªçn m√¥n gi·∫£ng d·∫°y..."}
                  </Text>
                </TouchableOpacity>

                {/* ====== Modal ch·ªçn m√¥n h·ªçc ====== */}
                <Modal
                  visible={modalSubjectVisible}
                  animationType="slide"
                  transparent={true}
                  onRequestClose={() => setModalSubjectVisible(false)}
                >
                  <View style={{ flex: 1, justifyContent: "flex-end", backgroundColor: "rgba(0,0,0,0.3)" }}>
                    <View style={{ backgroundColor: "white", borderTopLeftRadius: 20, borderTopRightRadius: 20, maxHeight: "65%" }}>
                      <Text style={{ fontSize: 18, fontWeight: "600", textAlign: "center", marginVertical: 10 }}>
                        Ch·ªçn m√¥n h·ªçc
                      </Text>
                      <TextInput
                        style={{
                          marginHorizontal: 15,
                          marginBottom: 10,
                          borderColor: "#ccc",
                          borderWidth: 1,
                          borderRadius: 8,
                          paddingHorizontal: 10,
                          height: 40,
                        }}
                        placeholder="T√¨m m√¥n h·ªçc..."
                        value={searchSubject}
                        onChangeText={setSearchSubject}
                      />
                      <FlatList
                        data={filteredSubjects}
                        keyExtractor={(item) => item}
                        renderItem={({ item }) => {
                          const selected = formData.serviceId.includes(item)
                          return (
                            <TouchableOpacity
                              style={{
                                paddingVertical: 12,
                                alignItems: "center",
                                borderBottomColor: "#eee",
                                borderBottomWidth: 1,
                                backgroundColor: selected ? "#E0F7FA" : "white",
                              }}
                              onPress={() => {
                                let newSelection
                                if (selected) {
                                  newSelection = formData.serviceId.filter((s) => s !== item)
                                } else {
                                  newSelection = [...formData.serviceId, item]
                                }
                                updateFormData("serviceId", newSelection)
                              }}
                            >
                              <Text style={{ fontSize: 16 }}>
                                {selected ? "‚úÖ " : ""}{item}
                              </Text>
                            </TouchableOpacity>
                          )
                        }}
                      />
                      <TouchableOpacity
                        style={{
                          backgroundColor: "#007AFF",
                          margin: 15,
                          borderRadius: 10,
                          paddingVertical: 12,
                          alignItems: "center",
                        }}
                        onPress={() => setModalSubjectVisible(false)}
                      >
                        <Text style={{ color: "white", fontWeight: "600" }}>Xong</Text>
                      </TouchableOpacity>
                    </View>
                  </View>
                </Modal>

                <TextInput
                  style={styles.input}
                  placeholder="Kinh nghi·ªám (VD: 3 nƒÉm d·∫°y h·ªçc)"
                  value={formData.experience}
                  onChangeText={(value) => updateFormData("experience", value)}
                />
                <TextInput
                  style={styles.input}
                  placeholder="Ch·ª©ng ch·ªâ (t√πy ch·ªçn)"
                  value={formData.certificate}
                  onChangeText={(value) => updateFormData("certificate", value)}
                />
              </View>
            )}

            {/* ====== ƒêƒÉng k√Ω ====== */}
            <TouchableOpacity
              style={[styles.loginButton, loading && { opacity: 0.7 }]}
              onPress={handleRegister}
              disabled={loading}
            >
              {loading ? <ActivityIndicator color="white" /> : <Text style={styles.loginButtonText}>ƒêƒÉng k√Ω</Text>}
            </TouchableOpacity>

            {/* ====== Quay l·∫°i ====== */}
            <TouchableOpacity style={styles.registerButton} onPress={onBackToLogin}>
              <Text style={styles.registerButtonText}>‚Üê ƒê√£ c√≥ t√†i kho·∫£n? ƒêƒÉng nh·∫≠p</Text>
            </TouchableOpacity>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  )
}

export default RegisterScreen
