import { useState, useEffect } from "react"
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  SafeAreaView,
  Alert,
  ActivityIndicator,
  ScrollView,
} from "react-native"
import { styles } from "@style/styles"
import UserService from "@service/UserService"
import tutorService from "@service/tutorService"
import ServiceService from "@service/serviceService";

const RegisterScreen = ({ onRegister, onBackToLogin }) => {
  // Kh·ªüi t·∫°o state formData ƒë·ªÉ l∆∞u d·ªØ li·ªáu nh·∫≠p t·ª´ ng∆∞·ªùi d√πng
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    email: "",
    password: "",
    confirmPassword: "",
    role: "customer", 
    serviceId: [],   // Danh s√°ch chuy√™n m√¥n (n·∫øu l√† gia s∆∞)
    experience: "",
    certificate: "",
    address: "",
  })

  const [services, setServices] = useState([]) // L∆∞u danh s√°ch d·ªãch v·ª•/chuy√™n m√¥n
  const [loading, setLoading] = useState(false) // Hi·ªÉn th·ªã loading khi ƒëƒÉng k√Ω

  // L·∫•y danh s√°ch d·ªãch v·ª• t·ª´ server khi component load l·∫ßn ƒë·∫ßu
  useEffect(() => {
    const fetchServices = async () => {
      try {
        const allServices = await ServiceService.getActiveServices()
        setServices(allServices)
      } catch (error) {
        console.error("Error fetching services:", error)
      }
    }
    fetchServices()
  }, [])

  // C·∫≠p nh·∫≠t d·ªØ li·ªáu form khi ng∆∞·ªùi d√πng nh·∫≠p
  const updateFormData = (field, value) => {
    setFormData((prev) => ({ ...prev, [field]: value }))
  }

  // H√†m ki·ªÉm tra d·ªØ li·ªáu nh·∫≠p
  const validateForm = () => {
    const { name, phone, email, password, confirmPassword, role, serviceId, experience } = formData

    if (!name.trim() || !phone.trim() || !email.trim() || !password.trim() || !confirmPassword.trim()) {
      Alert.alert("L·ªói", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin")
      return false
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i
    const phoneRegex = /^(0|\+84)(3[2-9]|5[6|8|9]|7[0|6-9]|8[1-9]|9[0-9])[0-9]{7}$/
    if (!phoneRegex.test(phone)) {
      Alert.alert("L·ªói", "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")
      return false
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      Alert.alert("L·ªói", "Email kh√¥ng h·ª£p l·ªá")
      return false
    }

    if (password !== confirmPassword) {
      Alert.alert("L·ªói", "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp")
      return false
    }

    if (password.length < 6) {
      Alert.alert("L·ªói", "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±")
      return false
    }

    // N·∫øu l√† gia s∆∞, c·∫ßn ch·ªçn chuy√™n m√¥n v√† nh·∫≠p kinh nghi·ªám
    if (role === "tutor" && (!serviceId.length || !experience.trim())) {
      Alert.alert("L·ªói", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt chuy√™n m√¥n v√† nh·∫≠p kinh nghi·ªám")
      return false
    }

    return true
  }

  // H√†m x·ª≠ l√Ω ƒëƒÉng k√Ω
  const handleRegister = async () => {
    if (!validateForm()) return

    try {
      setLoading(true)

      // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i ch∆∞a
      const phoneExists = await UserService.phoneExists(formData.phone)
      if (phoneExists) {
        Alert.alert("L·ªói", "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng")
        return
      }

      // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
      const emailExists = await UserService.emailExists(formData.email)
      if (emailExists) {
        Alert.alert("L·ªói", "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng")
        return
      }

      // T·∫°o d·ªØ li·ªáu user
      const userData = {
        name: formData.name,
        phone: formData.phone,
        email: formData.email,
        password: formData.password,
        role: formData.role,
        status: formData.role === "tutor" ? "pending" : "active", // Gia s∆∞ c·∫ßn admin duy·ªát
        joinDate: new Date().toISOString().split("T")[0],
        address: formData.address || "H√† N·ªôi",
        avatar: formData.role === "tutor" ? "üë®‚Äçüîß" : "üë§",
      }

      const userId = await UserService.createUser(userData)

      // N·∫øu l√† gia s∆∞, t·∫°o th√™m th√¥ng tin chuy√™n m√¥n
      if (formData.role === "tutor") {
        const selectedServiceNames = services
          .filter((s) => formData.serviceId.includes(s.id))
          .map((s) => s.name)
          .join(", ")

        const tutorData = {
          userId,
          name: formData.name,
          phone: formData.phone,
          email: formData.email,
          specialty: selectedServiceNames || "Kh√¥ng r√µ",
          serviceId: formData.serviceId,
          experience: formData.experience,
          certificate: formData.certificate,
          address: formData.address || "H√† N·ªôi",
          status: "false", // ch·ªù duy·ªát
          rating: 0,
          completedOrders: 0,
          price: "Th·ªèa thu·∫≠n",
          avatar: "üë®‚Äçüîß",
          reviews: 0,
        }

        await tutorService.createTutor(tutorData)
      }

      // Th√¥ng b√°o ƒëƒÉng k√Ω th√†nh c√¥ng
      Alert.alert(
        "ƒêƒÉng k√Ω th√†nh c√¥ng!",
        formData.role === "rutor"
          ? "T√†i kho·∫£n gia s∆∞ ƒë√£ ƒë∆∞·ª£c t·∫°o v√† ƒëang ch·ªù ph√™ duy·ªát t·ª´ admin."
          : "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay.",
        [{ text: "OK", onPress: onRegister }]
      )
    } catch (error) {
      console.error("Registration error:", error)
      Alert.alert("L·ªói", "ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.")
    } finally {
      setLoading(false)
    }
  }

  // Ch·ªçn/b·ªè ch·ªçn chuy√™n m√¥n
  const toggleService = (serviceId) => {
    const isSelected = formData.serviceId.includes(serviceId)
    const updatedServiceIds = isSelected
      ? formData.serviceId.filter((id) => id !== serviceId)
      : [...formData.serviceId, serviceId]
    updateFormData("serviceId", updatedServiceIds)
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={{ flex: 1 }}>
        <View style={styles.content}>
          <View style={styles.header}>
            <Text style={styles.logo}>üìù</Text>
            <Text style={styles.title}>ƒêƒÉng k√Ω t√†i kho·∫£n</Text>
            <Text style={styles.subtitle}>T·∫°o t√†i kho·∫£n m·ªõi ƒë·ªÉ s·ª≠ d·ª•ng d·ªãch v·ª•</Text>
          </View>

          <View style={styles.form}>
            {/* Ch·ªçn lo·∫°i t√†i kho·∫£n: kh√°ch h√†ng ho·∫∑c gia s∆∞ */}
            <View style={styles.roleContainer}>
              <Text style={styles.roleLabel}>Lo·∫°i t√†i kho·∫£n</Text>
              <View style={styles.roleButtons}>
                <TouchableOpacity
                  style={[styles.roleButton, formData.role === "customer" && styles.activeRoleButton]}
                  onPress={() => updateFormData("role", "customer")}
                >
                  <Text style={[styles.roleButtonText, formData.role === "customer" && styles.activeRoleButtonText]}>
                    üë§ Kh√°ch h√†ng
                  </Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={[styles.roleButton, formData.role === "tutor" && styles.activeRoleButton]}
                  onPress={() => updateFormData("role", "tutor")}
                >
                  <Text style={[styles.roleButtonText, formData.role === "tutor" && styles.activeRoleButtonText]}>
                  üéì Gia s∆∞
                  </Text>
                </TouchableOpacity>
              </View>
            </View>

            {/* Input th√¥ng tin c√° nh√¢n */}
            <TextInput
              style={styles.input}
              placeholder="H·ªç v√† t√™n"
              value={formData.name}
              onChangeText={(value) => updateFormData("name", value)}
              editable={!loading}
            />
            <TextInput
              style={styles.input}
              placeholder="S·ªë ƒëi·ªán tho·∫°i"
              value={formData.phone}
              onChangeText={(value) => updateFormData("phone", value)}
              keyboardType="phone-pad"
              editable={!loading}
            />
            <TextInput
              style={styles.input}
              placeholder="Email"
              value={formData.email}
              onChangeText={(value) => updateFormData("email", value)}
              keyboardType="email-address"
              autoCapitalize="none"
              editable={!loading}
            />
            <TextInput
              style={styles.input}
              placeholder="M·∫≠t kh·∫©u"
              value={formData.password}
              onChangeText={(value) => updateFormData("password", value)}
              secureTextEntry
              editable={!loading}
            />
            <TextInput
              style={styles.input}
              placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u"
              value={formData.confirmPassword}
              onChangeText={(value) => updateFormData("confirmPassword", value)}
              secureTextEntry
              editable={!loading}
            />
            <TextInput
              style={styles.input}
              placeholder="Khu v·ª±c (VD: H√† ƒê√¥ng , H√† N·ªôi)"
              value={formData.address}
              onChangeText={(value) => updateFormData("address", value)}
              editable={!loading}
            />

            {/* N·∫øu ch·ªçn gia s∆∞, hi·ªÉn th·ªã th√™m th√¥ng tin chuy√™n m√¥n */}
            {formData.role === "tutor" && (
              <View style={styles.tutorFieldsContainer}>
                <Text style={styles.tutorFieldsTitle}>Th√¥ng tin gia s∆∞</Text>

                {/* Ch·ªçn chuy√™n m√¥n */}
                <View style={styles.multiSelectContainer}>
                  <Text style={styles.multiSelectLabel}>Ch·ªçn chuy√™n m√¥n</Text>
                  {services.map((service) => {
                    const isSelected = formData.serviceId.includes(service.id)
                    return (
                      <TouchableOpacity
                        key={service.id}
                        style={[
                          styles.serviceItem,
                          isSelected && styles.serviceItemSelected,
                        ]}
                        onPress={() => toggleService(service.id)}
                        disabled={loading}
                      >
                        <Text style={isSelected ? styles.serviceTextSelected : styles.serviceText}>
                          {isSelected ? "‚úÖ " : "‚òëÔ∏è "} {service.name}
                        </Text>
                      </TouchableOpacity>
                    )
                  })}
                </View>

                {/* Nh·∫≠p kinh nghi·ªám v√† ch·ª©ng ch·ªâ */}
                <TextInput
                  style={styles.input}
                  placeholder="Kinh nghi·ªám (VD: 5 nƒÉm kinh nghi·ªám)"
                  value={formData.experience}
                  onChangeText={(value) => updateFormData("experience", value)}
                  editable={!loading}
                />
                <TextInput
                  style={styles.input}
                  placeholder="Ch·ª©ng ch·ªâ (t√πy ch·ªçn)"
                  value={formData.certificate}
                  onChangeText={(value) => updateFormData("certificate", value)}
                  editable={!loading}
                />

                {/* L∆∞u √Ω cho gia s∆∞ */}
                <View style={styles.tutorNote}>
                  <Text style={styles.tutorNoteText}>
                    üìù L∆∞u √Ω: T√†i kho·∫£n gia s∆∞ s·∫Ω ƒë∆∞·ª£c admin xem x√©t v√† ph√™ duy·ªát tr∆∞·ªõc khi c√≥ th·ªÉ s·ª≠ d·ª•ng.
                  </Text>
                </View>
              </View>
            )}

            {/* N√∫t ƒëƒÉng k√Ω */}
            <TouchableOpacity
              style={[styles.loginButton, loading && { opacity: 0.7 }]}
              onPress={handleRegister}
              disabled={loading}
            >
              {loading ? <ActivityIndicator color="white" /> : <Text style={styles.loginButtonText}>ƒêƒÉng k√Ω</Text>}
            </TouchableOpacity>

            {/* Chuy·ªÉn sang m√†n h√¨nh ƒëƒÉng nh·∫≠p */}
            <TouchableOpacity style={styles.registerButton} onPress={onBackToLogin}>
              <Text style={styles.registerButtonText}>‚Üê ƒê√£ c√≥ t√†i kho·∫£n? ƒêƒÉng nh·∫≠p</Text>
            </TouchableOpacity>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  )
}

export default RegisterScreen
